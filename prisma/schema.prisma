generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invite {
  id                Int      @id @default(autoincrement())
  email             String
  name              String
  role              UserRole
  organization_id   Int
  organization_name String
  created_at        DateTime @default(now())
}

model User {
  id                   Int                  @id @default(autoincrement())
  email                String               @unique
  password             String
  name                 String
  role                 UserRole
  credit_cards         CreditCard[]
  assignments          Issue[]
  linked_bank_accounts LinkedBankAccounts[]
  payments             Payment[]
  leases               Lease[]              @relation("LeaseToUser")
  organizations        Organization[]       @relation("OrganizationToUser")
}

model Organization {
  id         Int        @id @default(autoincrement())
  owner_id   Int
  name       String
  issues     Issue[]
  properties Property[]
  users      User[]     @relation("OrganizationToUser")
}

model CreditCard {
  id         Int     @id @default(autoincrement())
  number     String
  expiration String
  cvv        String
  validated  Boolean
  user_id    Int
  user       User    @relation(fields: [user_id], references: [id])
}

model LinkedBankAccounts {
  id             Int     @id @default(autoincrement())
  user_id        Int
  routing        String
  account_number String
  validated      Boolean
  user           User    @relation(fields: [user_id], references: [id])
}

model Property {
  id              Int          @id @default(autoincrement())
  name            String
  description     String
  address_1       String
  address_2       String
  city            String
  state           String
  zip_code        String
  images          String[]
  organization_id Int
  expenses        Expense[]
  issues          Issue[]
  leases          Lease[]
  payments        Payment[]
  organization    Organization @relation(fields: [organization_id], references: [id])
  units           Unit[]
}

model Expense {
  id              Int         @id @default(autoincrement())
  description     String
  property_id     Int
  organization_id Int
  amount          Float
  category        ExpenseType
  created_at      DateTime    @default(now())
  Property        Property    @relation(fields: [property_id], references: [id])
}

model Unit {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @default("")
  property_id Int
  images      String[]
  issues      Issue[]
  leases      Lease[]
  Payment     Payment[]
  property    Property  @relation(fields: [property_id], references: [id])
}

model Lease {
  id          Int       @id @default(autoincrement())
  unit_id     Int
  property_id Int
  start_date  DateTime
  end_date    DateTime
  active      Boolean
  created_at  DateTime  @default(now())
  amount      Float
  property    Property  @relation(fields: [property_id], references: [id])
  unit        Unit      @relation(fields: [unit_id], references: [id])
  payments    Payment[]
  users       User[]    @relation("LeaseToUser")
}

model Payment {
  id          Int      @id @default(autoincrement())
  lease_id    Int
  amount      Float
  unit_id     Int
  user_id     Int
  property_id Int
  description String
  created_at  DateTime @default(now())
  lease       Lease    @relation(fields: [lease_id], references: [id])
  property    Property @relation(fields: [property_id], references: [id])
  unit        Unit     @relation(fields: [unit_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
}

model Issue {
  id              Int               @id @default(autoincrement())
  status          IssueStatus       @default(open)
  type            IssueType
  author          String
  title           String
  description     String
  assigned_id     Int?
  organization_id Int
  property_id     Int
  unit_id         Int?
  created_at      DateTime          @default(now())
  assigned        User?             @relation(fields: [assigned_id], references: [id])
  organization    Organization      @relation(fields: [organization_id], references: [id])
  property        Property          @relation(fields: [property_id], references: [id])
  unit            Unit?             @relation(fields: [unit_id], references: [id])
  attachments     IssueAttachment[]
}

model IssueAttachment {
  id         Int      @id @default(autoincrement())
  issue_id   Int
  image_link String
  created_at DateTime @default(now())
  Issue      Issue    @relation(fields: [issue_id], references: [id])
}

enum IssueType {
  complaint
  fix
  consultation
}

enum IssueStatus {
  complete
  open
  inprogress
}

enum UserRole {
  owner
  employee
  resident
}

enum ExpenseType {
  labor
  hardware
  management
}
